# Generated by Django 5.2 on 2025-04-15 02:58

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                ("address_id", models.AutoField(primary_key=True, serialize=False)),
                ("street", models.CharField(blank=True, max_length=255, null=True)),
                ("number", models.CharField(blank=True, max_length=10, null=True)),
                ("complement", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "neighborhood",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                "db_table": "Address",
                "db_table_comment": "Stores residential address for a person.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Caresite",
            fields=[
                (
                    "caresite_id",
                    models.AutoField(db_column="careSite_id", primary_key=True, serialize=False),
                ),
                (
                    "care_site_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("location_id", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "CareSite",
                "db_table_comment": "Healthcare facility or unit where a provider may be associated. Currently not used in UI, but useful for future multi-site features.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Concept",
            fields=[
                ("concept_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "concept_name",
                    models.CharField(
                        blank=True,
                        db_comment="Name of the concept (e.g. 'Feminino', 'Tomar rem√ödio')",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "domain_id",
                    models.CharField(
                        blank=True,
                        db_comment="Categorization of concept purpose (e.g. 'gender', 'observation_type')",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "Concept",
                "db_table_comment": "OMOP-compliant table for storing standardized values and custom entries such as habits, tasks, and symptoms.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                ("domain_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "domain_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "Domain",
                "db_table_comment": "Reference table for organizing types of concepts.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Drugexposure",
            fields=[
                (
                    "drugexposure_id",
                    models.AutoField(
                        db_column="drugExposure_id",
                        db_comment="Primary key of the drug exposure record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "drug_exposure_start_date",
                    models.DateField(
                        blank=True,
                        db_comment="Date when the medication regimen begins",
                        null=True,
                    ),
                ),
                (
                    "drug_exposure_end_date",
                    models.DateField(
                        blank=True,
                        db_comment="Optional end date for the medication regimen",
                        null=True,
                    ),
                ),
                (
                    "stop_reason",
                    models.CharField(
                        blank=True,
                        db_comment="Optional reason for stopping the medication",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        blank=True,
                        db_comment="Total number of units prescribed or dispensed (e.g., 30 pills)",
                        null=True,
                    ),
                ),
                (
                    "interval_hours",
                    models.IntegerField(
                        blank=True,
                        db_comment="Interval between doses in hours (e.g. 8 = every 8 hours)",
                        null=True,
                    ),
                ),
                (
                    "dose_times",
                    models.TextField(
                        blank=True,
                        db_comment="Fixed intake times (e.g. ['08:00', '20:00'])",
                        null=True,
                    ),
                ),
                (
                    "sig",
                    models.TextField(
                        blank=True,
                        db_comment="Free-text instructions for the patient (e.g. '1x ao dia em jejum')",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_comment="Record creation timestamp", null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_comment="Record update timestamp", null=True),
                ),
            ],
            options={
                "db_table": "DrugExposure",
                "db_table_comment": "Captures medication prescriptions or usage. Supports structured tracking for reminders, notifications, and clinical follow-up. Aligned with OMOP, with local extensions for real-time alerts based on dosage schedule.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Emergencymessage",
            fields=[
                (
                    "emergency_message_id",
                    models.AutoField(
                        db_comment="Primary key for the emergency message",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        db_comment="Free-text description of the emergency situation",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Timestamp when the emergency was reported",
                        null=True,
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Last update time (optional edits or resolutions)",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "EmergencyMessage",
                "db_table_comment": "Represents an urgent message initiated by the patient to signal psychological distress or critical situations. Can be shared with one or more providers.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EmergencyProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "acknowledged",
                    models.BooleanField(
                        blank=True,
                        db_comment="Whether the provider acknowledged the emergency",
                        null=True,
                    ),
                ),
                (
                    "response_note",
                    models.TextField(
                        blank=True,
                        db_comment="Optional note or summary written by the provider in response",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "Emergency_Provider",
                "db_table_comment": "Many-to-many relationship linking emergency alerts to responsible or notified healthcare professionals. Tracks acknowledgment and responses to urgent cases.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Linkedprovider",
            fields=[
                (
                    "linkedprovider_id",
                    models.AutoField(db_column="linkedProvider_id", primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "LinkedProvider",
                "db_table_comment": "Links patients to providers. Enables shared visibility of patient data.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Observation",
            fields=[
                ("observation_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "value_as_text",
                    models.TextField(
                        blank=True,
                        db_comment="Free-text input (e.g. diary, thought, notes)",
                        null=True,
                    ),
                ),
                (
                    "observation_date",
                    models.DateTimeField(
                        blank=True,
                        db_comment="When the observation occurred",
                        null=True,
                    ),
                ),
                (
                    "shared_with_provider",
                    models.BooleanField(
                        blank=True,
                        db_comment="Whether this data is visible to the assigned provider",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "Observation",
                "db_table_comment": "Core table for capturing all patient-reported or observed data, including symptoms, habits, notes, tasks, etc. OMOP-aligned and extensible.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "person_id",
                    models.IntegerField(
                        db_comment="Primary key of the Person table",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "social_name",
                    models.CharField(
                        blank=True,
                        db_comment="Optional name used by the person in social or preferred contexts",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "birth",
                    models.DateField(blank=True, db_comment="Date of birth", null=True),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True,
                        db_comment="Height in meters (or preferred unit)",
                        null=True,
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        blank=True,
                        db_comment="Weight in kilograms (or preferred unit)",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_comment="Record creation timestamp", null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_comment="Last update timestamp", null=True),
                ),
            ],
            options={
                "db_table": "Person",
                "db_table_comment": "Represents an individual user who is a patient in the system. Each person is linked to a base User account and may optionally declare social identifiers, demographics, and physical attributes. Compatible with OMOP conventions for population-based data.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "provider_id",
                    models.IntegerField(
                        db_comment="Primary key of the Provider table",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "social_name",
                    models.CharField(
                        blank=True,
                        db_comment="Optional name used in social or professional contexts",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "professional_email",
                    models.CharField(
                        blank=True,
                        db_comment="Official work email address of the provider",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "professional_registration",
                    models.IntegerField(
                        blank=True,
                        db_comment="Registration number in official professional board (e.g. CRM, CRP, COREN)",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_comment="Record creation timestamp", null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_comment="Last update timestamp", null=True),
                ),
            ],
            options={
                "db_table": "Provider",
                "db_table_comment": "Represents a healthcare professional, such as a Community Health Agent (ACS), psychologist, or psychiatrist. Each provider is linked to a User account and may interact with multiple patients through LinkedProvider.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProviderCaresite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "Provider_CareSite",
                "db_table_comment": "Many-to-many relation between providers and care sites.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProviderConcept",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "Provider_Concept",
                "db_table_comment": "Represents provider specialities or roles via concepts (e.g. 'Psic¬ælogo').",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        db_comment="User's given name",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        db_comment="User's family name",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        db_comment="Login email, must be unique",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        blank=True,
                        db_comment="Indicates if the user account is active",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "User",
                "db_table_comment": "Generic authentication table, used by both patients (Person) and professionals (Provider).",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Visitoccurrence",
            fields=[
                (
                    "visitoccurrence_id",
                    models.AutoField(
                        db_column="visitOccurrence_id",
                        db_comment="Primary key for the visit record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "visit_date",
                    models.DateTimeField(
                        blank=True,
                        db_comment="Start date and time of the visit",
                        null=True,
                    ),
                ),
                (
                    "visit_end_date",
                    models.DateTimeField(
                        blank=True,
                        db_comment="End date and time of the visit (optional)",
                        null=True,
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        db_comment="Free-text field for summarizing key points or outcomes of the visit",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(blank=True, db_comment="Timestamp of record creation", null=True),
                ),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, db_comment="Timestamp of last update", null=True),
                ),
            ],
            options={
                "db_table": "VisitOccurrence",
                "db_table_comment": "Stores scheduled or completed interactions between a patient and a healthcare professional. Can be used for consultations, check-ins, or assessments. Extensible to multiple providers and care sites.",
                "managed": False,
            },
        ),
    ]
